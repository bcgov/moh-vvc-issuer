---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: vvc
  description: >-
    Deployment template for the VVC App
parameters:
- name: SVC_NAME
  displayName: Name
  description: A name appended to all objects
  required: true
  value: vvc
- name: IMAGE_TAG
  displayName: Image Tag
  description: an identifier that labels which version an image belongs to.
  required: true
- name: OC_NAMESPACE
  displayName: OpenShift License Plate
  description: Prepends your dev/test/prod URL
  required: true
  value: 1f9996
- name: OC_APP
  displayName: Openshift Environment
  description: dev/test/prod
  required: true
- name: FRONTEND_POD
  displayName: Frontend Pod Name
  description: For naming the web/reverse proxy pod
  required: true
  value: frontend
- name: FRONTEND_URL
  displayName: Frontend URL
  description: Minus the HTTP/HTTPS, this is your vanity URL or the prefix of your default URL
  required: true
  value: frontend
- name: API_POD
  displayName: API Pod Name
  description: For the .NET API
  required: true
  value: webapi
- name: ASP_ENV
  displayName: ASP.NET Environment
  description: Development or Production
  required: true
  value: Development
- name: DB_POD
  displayName: Database Pod
  description: Postgres database
  required: true
  value: postgres
- name: WEB_PORT
  displayName: Web Port for NGINX
  description: Termination port on NGINX (8080 or 8443)
  value: "8080"
- name: URL_STUB
  displayName: URL Stub
  description: Appended to all URLs, used in PRs
  value: "-1f9996-dev.apps.silver.devops.gov.bc.ca"
  required: false
objects:
  ###########################################
  ###           Backend Web API           ###
  ###########################################
  #   Backend Web API Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    annotations:
      app.openshift.io/connects-to: >-
        [{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${SVC_NAME}-${DB_POD}"}]
    name: ${SVC_NAME}-${API_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app: ${SVC_NAME}-${DB_POD}
      app.kubernetes.io/component: ${SVC_NAME}
      app.kubernetes.io/instance: ${SVC_NAME}
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: dotnet
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${SVC_NAME}-${API_POD}
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-${API_POD}
      spec:
        containers:
          - name: ${SVC_NAME}-${API_POD}
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/vvc-issuer-api:${IMAGE_TAG}
            env:
              - name: DB_HOST
                value: ${SVC_NAME}-${DB_POD}
              - name: database-password
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-password
              - name: database-name
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-user
              - name: database-user
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-user
              - name: database-password
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-password
              - name: POSTGRESQL_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-password
            ports:
              - containerPort: 1025
                protocol: TCP
              - containerPort: 5001
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
            imagePullPolicy: IfNotPresent
            terminationMessagePolicy: File
            envFrom:
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${SVC_NAME}-${API_POD}
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'moh-vvc-issuer-api:${IMAGE_TAG}'
  status: {}
#   Backend Web API Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  labels:
  metadata:
    name: ${SVC_NAME}-${API_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app: ${SVC_NAME}-${DB_POD}
      app.kubernetes.io/component: ${SVC_NAME}
      app.kubernetes.io/instance: ${SVC_NAME}
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: ${SVC_NAME}-${API_POD}
        port: 8080
        targetPort: 8080
    selector:
      name: ${SVC_NAME}-${API_POD}
#   Frontend Route (Web)
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: ${SVC_NAME}-${API_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    host: ${SVC_NAME}${URL_STUB}
    to:
      kind: Service
      name: ${SVC_NAME}-${API_POD}
      weight: 100
    port:
      targetPort: http
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    wildcardPolicy: None
  status: {}

###########################################
###         PostgreSQL Database         ###
###########################################
#   PostgreSQL database Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-${DB_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app: ${SVC_NAME}-${DB_POD}
      app.kubernetes.io/component: ${SVC_NAME}
      app.kubernetes.io/instance: ${SVC_NAME}
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: postgresql
  spec:
    replicas: 1
    selector:
      name: ${SVC_NAME}-${DB_POD}
    strategy: null
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-${DB_POD}
      spec:
        containers:
          - capabilities: {}
            env:
              - name: DB_HOST
                value: ${SVC_NAME}-${DB_POD}
              # PostgreSQL environment variables
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-password
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-user
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-password
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: vvc-postgresql-db
                    key: database-name
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/postgresql:10
            imagePullPolicy: IfNotPresent
            lifecycle:
              preStop:
                exec:
                  command: ["pg_ctl", "stop"]
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 5432
              timeoutSeconds: 1
            name: ${SVC_NAME}-${DB_POD}
            ports:
              - containerPort: 5432
                protocol: TCP
                name: postgresql
            resources: {}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
              - mountPath: /var/lib/pgsql/data
                name: ${SVC_NAME}-${DB_POD}-data
              - mountPath: /var/run/postgresql
                name: ${SVC_NAME}-${DB_POD}-run
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
          - name: ${SVC_NAME}-${DB_POD}-data
            emptyDir: {}
          - name: ${SVC_NAME}-${DB_POD}-run
            emptyDir: {}
  status: {}
#   PostgreSQL Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-${DB_POD}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app: ${SVC_NAME}-${DB_POD}
      app.kubernetes.io/component: ${SVC_NAME}
      app.kubernetes.io/instance: ${SVC_NAME}
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: ${SVC_NAME}-${DB_POD}
        nodePort: 0
        port: 5432
        protocol: TCP
        targetPort: 5432
    selector:
      name: ${SVC_NAME}-${DB_POD}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

###########################################
###           Network Policies          ###
###########################################
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: allow-internal-traffic
    namespace: ${OC_NAMESPACE}-${OC_APP}
  spec:
    podSelector: {}
    ingress:
      - ports:
          - protocol: TCP
            port: 80
          - protocol: TCP
            port: 443
          - protocol: TCP
            port: 5432
    policyTypes:
      - Ingress
